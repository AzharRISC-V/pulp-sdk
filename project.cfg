import plpproject as plp
import os

ProjectConfig = c = {}

if os.environ.get('PULP_GITHUB_SSH') is None:
  github = 'https://github.com/'
else:
  github = 'git@github.com:'

has_gw_gitlab = os.environ.get('PULP_GW_GITLAB') is not None

#
# MODULES
#

json_tools = plp.Module(
  name  = 'json-tools',
  path  = 'json-tools',
  deps  = [],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build', 'make all install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_tools = plp.Module(
  name  = 'pulp-tools',
  path  = 'pulp-tools',
  deps  = [json_tools],
  steps = [
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build', 'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_configs = plp.Module(
  name  = 'pulp-configs',
  path  = 'pulp-configs',
  deps  = [pulp_tools],
  steps = [
    plp.BuildStep('build', 'make all sdk_install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

rules = plp.Module(
  name  = 'pulp-rules',
  url   = github + 'pulp-platform/pulp-rules.git',
  path  = 'tools/pulp-rules',
  deps  = [pulp_tools],
  steps = [
    plp.BuildStep('prepare', 'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

runner = plp.Module(
  name  = 'runner',
  url   = github + 'pulp-platform/runner.git',
  path  = 'tools/runner',
  steps = [
    plp.BuildStep('build', 'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)





pulp_debug_bridge = plp.Module(
  name  = 'debug-bridge',
  url   = github + 'pulp-platform/pulp-debug-bridge.git',
  path  = 'tools/pulp-debug-bridge',
  deps  = [json_tools],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt = plp.Module(
  name       = 'pulp-rt',
  url        = 'git@gitlab.cc-asp.fraunhofer.de:pietzsch/USoC_software.git',
  path       = 'runtime/pulp-rt',
  deps       = [rules],
  parameters = ['pulp_chip', 'pulp_compiler', 'pulp_rt_version', 'pulp_chip_version', 'install_name'],
  steps      = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

sdk_install = plp.Module(
  name       = 'sdk_install',
  path       = 'install',
  deps       = [pulp_tools],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

doc = plp.Module(
  name       = 'doc',
  path       = 'doc',
  deps       = [pulp_rt],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)


riscv_tests = plp.Module(
  name     = 'riscv_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/riscv_tests.git',
  path     = 'tests/riscv_tests',
  testsets = ['testset.cfg']
)

sequential_bare_tests = plp.Module(
  name     = 'sequential_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/sequential_bare_tests.git',
  path     = 'tests/sequential_bare_tests',
  testsets = ['testset.cfg']
)

parallel_bare_tests = plp.Module(
  name     = 'parallel_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/parallel_bare_tests.git',
  path     = 'tests/parallel_bare_tests',
  testsets = ['testset.cfg']
)

rt_tests = plp.Module(
  name     = 'rt-tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/rt-tests.git',
  path     = 'tests/rt-tests',
  testsets = ['testset.cfg']
)

oprecomp_tests = plp.Module(
  name     = 'oprecomp-tests',
  url      = 'git@iis-git.ee.ethz.ch:oprecomp/oprecomp.git',
  path     = 'tests/oprecomp-tests',
  testsets = ['testset.cfg'],
  restrict   = "config.get('pulp_chip').find('oprecompkw') != -1"
)

rt_examples = plp.Module(
  name     = 'pulp-rt-examples',
  url      = github + 'pulp-platform/pulp-rt-examples.git',
  path     = 'examples/pulp-rt-examples',
  testsets = ['testset.cfg']
)

pulp_tests = plp.Module(
  name     = 'pulp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/pulp_tests.git',
  path     = 'tests/pulp_tests',
  testsets = ['testset.cfg']
)

ml_tests = plp.Module(
  name     = 'ml_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/ml_tests.git',
  path     = 'tests/ml_tests',
  testsets = ['testset.cfg']
)

gomp_tests = plp.Module(
  name     = 'gomp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-apps/gomp_tests.git',
  path     = 'apps/gomp_tests',
  #testsets = ['testset.cfg']
)


autotiler_examples = plp.Module(
  name     = 'autotiler_examples',
  url      = 'git@gitlab.greenwaves-tech.com:gwt_app_developer/autotiler_examples.git',
  path     = 'examples/autotiler_examples',
  restrict   = "config.get('pulp_chip') == 'gap'",
  steps      = [
    plp.BuildStep('build', 'make build'),
  ]
)



#
# GROUPS
#

examples_modules = [ ]

if has_gw_gitlab:
  tools_modules    += [ auto_tiler ]
  examples_modules += [ autotiler_examples ]


platform = plp.Group('platform', [pulp_tools, pulp_configs, rules, json_tools, pulp_debug_bridge, runner] )
runtime  = plp.Group('runtime',  [pulp_tools, pulp_configs, rules, json_tools, pulp_debug_bridge, pulp_rt, runner] )
pkg    = plp.Group('pkg',  [doc, sdk_install] )
libs   = plp.Group('libs',  [] )
examples = plp.Group('examples', examples_modules )


#
# PACKAGES
#

sdk = plp.Package(
  name       = 'sdk',
  path       = 'sdk',
  modules    = [ ],
  groups     = [ platform, runtime, libs, pkg, examples ],
  build_deps = [ ],
  exec_deps  = [  ],
  artifact   = True,
  env        = { 'PULP_SDK_HOME'       : 'self.get_absolute_path()',
                 'PULP_SDK_INSTALL'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'PULP_SDK_WS_INSTALL' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'TARGET_INSTALL_DIR'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'INSTALL_DIR' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'DEP_DIRS' : 'os.path.join(self.get_absolute_path(), "install", "ws")'
               },
  sourceme   = [ [ 'property_eval', 'PULP_SDK_HOME',       'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
                 [ 'property',      'PULP_SDK_INSTALL',    '$PULP_SDK_HOME/install' ],
                 [ 'property',      'PULP_SDK_WS_INSTALL', '$PULP_SDK_HOME/install/ws' ],
                 [ 'sourceme',      '$PULP_SDK_HOME/env/setup.sh', '$PULP_SDK_HOME/env/setup.csh' ],
               ]
)


tests = plp.Package(
  name       = 'tests',
  modules    = [ rt_examples, rt_tests, oprecomp_tests, ml_tests, pulp_tests, gomp_tests, riscv_tests, sequential_bare_tests, parallel_bare_tests ],
  build_deps = [ plp.PkgDep(sdk) ],
)



c['packages'] = [ sdk, tests ]




#
# GLOBAL CONFIGURATION
#

c['build_steps'] = plp.BuildSteps([
  plp.BuildStepMap('checkout', ['checkout']),
  plp.BuildStepMap('clean',    ['clean']),
  plp.BuildStepMap('build',    ['prepare', 'build']),
  plp.BuildStepMap('deploy',   ['deploy']),
])

c['artifact_cache'] = '/usr/pack/pulpsdk-1.0-kgf/artifactory'

c['artifactory_servers'] = [
  plp.ArtifactoryServer(name='eth',   url='https://iis-artifactory.ee.ethz.ch/artifactory/release',         ssl_verify=True),
  plp.ArtifactoryServer(name='unibo', url="https://artifactory.eees.dei.unibo.it:8081/artifactory/release", ssl_verify=False),
]

c['system_configs'] = ['configs/pulp.json']

c['root_build_dir'] = 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")'

c['env'] = {'ROOT_BUILD_DIR' : 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")',
           }
